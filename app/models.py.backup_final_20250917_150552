# app/models.py - VERSÃO ABSOLUTA E COMPLETA
# Contém TODOS os modelos necessários para o sistema funcionar

from datetime import datetime
from sqlalchemy import Enum as SqlEnum
import enum
from flask_login import UserMixin
from app import db

# ===================== ENUMS =====================

class TipoUsuario(enum.Enum):
    ADMIN = "admin"
    USUARIO = "usuario" 
    AUDITOR = "auditor"

class StatusAplicacao(enum.Enum):
    EM_ANDAMENTO = "em_andamento"
    FINALIZADA = "finalizada"
    CANCELADA = "cancelada"
    PAUSADA = "pausada"

class ModoExibicaoNota(enum.Enum):
    PERCENTUAL = "percentual"
    FRACAO = "fracao"
    NOTA = "nota"

class TipoPreenchimento(enum.Enum):
    RAPIDO = "rapido"
    DETALHADO = "detalhado"
    PERSONALIZADO = "personalizado"

class CorRelatorio(enum.Enum):
    AZUL = "azul"
    VERDE = "verde"
    VERMELHO = "vermelho"
    LARANJA = "laranja"
    ROXO = "roxo"
    CINZA = "cinza"

class StatusQuestionario(enum.Enum):
    RASCUNHO = "rascunho"
    ATIVO = "ativo"
    INATIVO = "inativo"
    ARQUIVADO = "arquivado"

class TipoResposta(enum.Enum):
    CONFORME = "conforme"
    NAO_CONFORME = "nao_conforme"
    NAO_APLICAVEL = "nao_aplicavel"
    PARCIALMENTE_CONFORME = "parcialmente_conforme"

class TipoPergunta(enum.Enum):
    MULTIPLA_ESCOLHA = "multipla_escolha"
    TEXTO_LIVRE = "texto_livre"
    CHECKBOX = "checkbox"
    ESCALA = "escala"
    CONFORMIDADE = "conformidade"

# ===================== MODELOS PRINCIPAIS =====================

class Cliente(db.Model):
    """Cliente/Empresa"""
    __tablename__ = 'cliente'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    telefone = db.Column(db.String(20))
    endereco = db.Column(db.Text)
    ativo = db.Column(db.Boolean, default=True)
    data_criacao = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relacionamentos
    usuarios = db.relationship('Usuario', backref='cliente', lazy='dynamic')
    questionarios = db.relationship('Questionario', backref='cliente', lazy='dynamic')
    avaliados = db.relationship('Avaliado', backref='cliente', lazy='dynamic')
    grupos = db.relationship('Grupo', backref='cliente', lazy='dynamic')

class Usuario(UserMixin, db.Model):
    """Usuários do sistema"""
    __tablename__ = 'usuario'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    senha = db.Column(db.String(200), nullable=False)
    tipo_usuario = db.Column(SqlEnum(TipoUsuario), nullable=False)
    ativo = db.Column(db.Boolean, default=True)
    ultimo_login = db.Column(db.DateTime)
    data_criacao = db.Column(db.DateTime, default=datetime.utcnow)
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'), nullable=False)

class Questionario(db.Model):
    """Questionários/Checklists"""
    __tablename__ = 'questionario'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    descricao = db.Column(db.Text)
    ativo = db.Column(db.Boolean, default=True)
    data_criacao = db.Column(db.DateTime, default=datetime.utcnow)
    data_atualizacao = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    modo_exibicao_nota = db.Column(SqlEnum(ModoExibicaoNota), default=ModoExibicaoNota.PERCENTUAL)
    tipo_preenchimento = db.Column(SqlEnum(TipoPreenchimento), default=TipoPreenchimento.RAPIDO)
    cor_relatorio = db.Column(SqlEnum(CorRelatorio), default=CorRelatorio.AZUL)
    status = db.Column(SqlEnum(StatusQuestionario), default=StatusQuestionario.ATIVO)
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'), nullable=False)
    
    # Relacionamentos
    topicos = db.relationship('Topico', backref='questionario', lazy='dynamic', cascade='all, delete-orphan')
    aplicacoes = db.relationship('Aplicacao', backref='questionario', lazy='dynamic')
    usuarios_autorizados = db.relationship('UsuarioAutorizado', backref='questionario', lazy='dynamic', cascade='all, delete-orphan')

class Topico(db.Model):
    """Tópicos dos questionários"""
    __tablename__ = 'topico'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    descricao = db.Column(db.Text)
    ordem = db.Column(db.Integer, default=1)
    ativo = db.Column(db.Boolean, default=True)
    questionario_id = db.Column(db.Integer, db.ForeignKey('questionario.id'), nullable=False)
    
    # Relacionamentos
    perguntas = db.relationship('Pergunta', backref='topico', lazy='dynamic', cascade='all, delete-orphan')

class Pergunta(db.Model):
    """Perguntas dos tópicos"""
    __tablename__ = 'pergunta'
    
    id = db.Column(db.Integer, primary_key=True)
    texto = db.Column(db.Text, nullable=False)
    tipo = db.Column(SqlEnum(TipoPergunta), default=TipoPergunta.CONFORMIDADE)
    ordem = db.Column(db.Integer, default=1)
    obrigatoria = db.Column(db.Boolean, default=True)
    ativo = db.Column(db.Boolean, default=True)
    peso = db.Column(db.Float, default=1.0)
    topico_id = db.Column(db.Integer, db.ForeignKey('topico.id'), nullable=False)
    
    # Relacionamentos
    opcoes = db.relationship('OpcaoPergunta', backref='pergunta', lazy='dynamic', cascade='all, delete-orphan')
    respostas = db.relationship('Resposta', backref='pergunta', lazy='dynamic')

class OpcaoPergunta(db.Model):
    """Opções para perguntas de múltipla escolha"""
    __tablename__ = 'opcao_pergunta'
    
    id = db.Column(db.Integer, primary_key=True)
    texto = db.Column(db.String(200), nullable=False)
    valor = db.Column(db.String(50))
    pontuacao = db.Column(db.Float, default=0.0)
    ordem = db.Column(db.Integer, default=1)
    ativo = db.Column(db.Boolean, default=True)
    pergunta_id = db.Column(db.Integer, db.ForeignKey('pergunta.id'), nullable=False)

class Grupo(db.Model):
    """Grupos de avaliados"""
    __tablename__ = 'grupo'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    descricao = db.Column(db.Text)
    codigo = db.Column(db.String(50))
    ativo = db.Column(db.Boolean, default=True)
    data_criacao = db.Column(db.DateTime, default=datetime.utcnow)
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'), nullable=False)
    
    # Relacionamentos
    avaliados = db.relationship('Avaliado', backref='grupo', lazy='dynamic')

class Avaliado(db.Model):
    """Avaliados (lojas, unidades, pessoas)"""
    __tablename__ = 'avaliado'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(200), nullable=False)
    email = db.Column(db.String(120))
    telefone = db.Column(db.String(20))
    endereco = db.Column(db.Text)
    codigo = db.Column(db.String(50))
    ativo = db.Column(db.Boolean, default=True)
    data_criacao = db.Column(db.DateTime, default=datetime.utcnow)
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'), nullable=False)
    grupo_id = db.Column(db.Integer, db.ForeignKey('grupo.id'))
    
    # Relacionamentos
    aplicacoes = db.relationship('Aplicacao', backref='avaliado', lazy='dynamic')

class Aplicacao(db.Model):
    """Aplicações de questionários"""
    __tablename__ = 'aplicacao'
    
    id = db.Column(db.Integer, primary_key=True)
    data_inicio = db.Column(db.DateTime, default=datetime.utcnow)
    data_fim = db.Column(db.DateTime)
    status = db.Column(SqlEnum(StatusAplicacao), default=StatusAplicacao.EM_ANDAMENTO)
    pontuacao_final = db.Column(db.Float)
    percentual_conformidade = db.Column(db.Float)
    observacoes = db.Column(db.Text)
    questionario_id = db.Column(db.Integer, db.ForeignKey('questionario.id'), nullable=False)
    avaliado_id = db.Column(db.Integer, db.ForeignKey('avaliado.id'), nullable=False)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Relacionamentos
    respostas = db.relationship('Resposta', backref='aplicacao', lazy='dynamic', cascade='all, delete-orphan')

class Resposta(db.Model):
    """Respostas das perguntas"""
    __tablename__ = 'resposta'
    
    id = db.Column(db.Integer, primary_key=True)
    valor = db.Column(SqlEnum(TipoResposta), nullable=False)
    texto_resposta = db.Column(db.Text)  # Para respostas abertas
    comentario = db.Column(db.Text)
    pontuacao = db.Column(db.Float)
    data_resposta = db.Column(db.DateTime, default=datetime.utcnow)
    aplicacao_id = db.Column(db.Integer, db.ForeignKey('aplicacao.id'), nullable=False)
    pergunta_id = db.Column(db.Integer, db.ForeignKey('pergunta.id'), nullable=False)

# ===================== MODELOS ADICIONAIS/ALIAS =====================

# Alias para compatibilidade com imports antigos
class AplicacaoQuestionario(db.Model):
    """Alias para Aplicacao - compatibilidade"""
    __tablename__ = 'aplicacao_questionario'
    
    id = db.Column(db.Integer, primary_key=True)
    data_inicio = db.Column(db.DateTime, default=datetime.utcnow)
    data_fim = db.Column(db.DateTime)
    status = db.Column(SqlEnum(StatusAplicacao), default=StatusAplicacao.EM_ANDAMENTO)
    pontuacao_final = db.Column(db.Float)
    questionario_id = db.Column(db.Integer, db.ForeignKey('questionario.id'), nullable=False)
    avaliado_id = db.Column(db.Integer, db.ForeignKey('avaliado.id'), nullable=False)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)

# Alias para Resposta
class RespostaPergunta(db.Model):
    """Alias para Resposta - compatibilidade"""
    __tablename__ = 'resposta_pergunta'
    
    id = db.Column(db.Integer, primary_key=True)
    valor = db.Column(SqlEnum(TipoResposta), nullable=False)
    comentario = db.Column(db.Text)
    pontuacao = db.Column(db.Float)
    data_resposta = db.Column(db.DateTime, default=datetime.utcnow)
    aplicacao_id = db.Column(db.Integer, db.ForeignKey('aplicacao.id'), nullable=False)
    pergunta_id = db.Column(db.Integer, db.ForeignKey('pergunta.id'), nullable=False)

class UsuarioAutorizado(db.Model):
    """Usuários autorizados para questionários"""
    __tablename__ = 'usuario_autorizado'
    
    id = db.Column(db.Integer, primary_key=True)
    data_autorizacao = db.Column(db.DateTime, default=datetime.utcnow)
    ativo = db.Column(db.Boolean, default=True)
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    questionario_id = db.Column(db.Integer, db.ForeignKey('questionario.id'), nullable=False)

# ===================== MODELOS AUXILIARES =====================

class Anexo(db.Model):
    """Anexos para respostas"""
    __tablename__ = 'anexo'
    
    id = db.Column(db.Integer, primary_key=True)
    nome_arquivo = db.Column(db.String(200), nullable=False)
    caminho_arquivo = db.Column(db.String(500), nullable=False)
    tipo_arquivo = db.Column(db.String(50))
    tamanho = db.Column(db.Integer)
    data_upload = db.Column(db.DateTime, default=datetime.utcnow)
    resposta_id = db.Column(db.Integer, db.ForeignKey('resposta.id'))

class Configuracao(db.Model):
    """Configurações do sistema"""
    __tablename__ = 'configuracao'
    
    id = db.Column(db.Integer, primary_key=True)
    chave = db.Column(db.String(100), unique=True, nullable=False)
    valor = db.Column(db.Text)
    descricao = db.Column(db.Text)
    data_atualizacao = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    cliente_id = db.Column(db.Integer, db.ForeignKey('cliente.id'))

class Log(db.Model):
    """Log de ações do sistema"""
    __tablename__ = 'log'
    
    id = db.Column(db.Integer, primary_key=True)
    acao = db.Column(db.String(200), nullable=False)
    detalhes = db.Column(db.Text)
    data_acao = db.Column(db.DateTime, default=datetime.utcnow)
    ip_address = db.Column(db.String(45))
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))

# Alias adicionais para compatibilidade (qualquer import que possa aparecer)
Loja = Avaliado  # Alias
Unidade = Avaliado  # Alias
Auditoria = Aplicacao  # Alias
Checklist = Questionario  # Alias
